#!/system/bin/sh

set -x
export PATH=/:/sbin:/system/xbin:/system/bin:/tmp:$PATH

/sbin/busybox mount -o remount,rw -t ext4 /dev/stl9 /system
/sbin/busybox mount -o remount,rw -t ext4 / /

# Path Informations & Fixes:)
SHELL="/sbin/busybox"
ROOT_ROOT="root.root"
ROOT_RADIO="root.radio"
ROOT_SYSTEM="root.system"
RADIO_SYSTEM="root.system"

if $SHELL test -f /sbin/toolbox ; then
	LN="/sbin/toolbox ln"
	CHOWN="/sbin/toolbox chown"
	CHMOD="/sbin/toolbox chmod"
	MKDIR="/sbin/toolbox mkdir"
	RMDIR="/sbin/toolbox rmdir"
	ROOT_SYSTEM="root.system"
	ROOT_RRADIO="root.radio"
	ROOT_ROOT="root.root"
else
	if $SHELL test -f /system/bin/toolbox ; then
		LN="/system/bin/toolbox ln"
		CHOWN="/system/bin/toolbox chown"
		CHMOD="/system/bin/toolbox chmod"
		MKDIR="/system/bin/toolbox mkdir"
		RMDIR="/system/bin/toolbox rmdir"
		ROOT_SYSTEM="root.system"
		ROOT_RADIO="root.radio"
		ROOT_ROOT="root.root"
CHMOD="$SHELL chmod"
	elif $SHELL test -f /system/xbin/busybox ; then
		SHELL="/system/xbin/busybox"
		LN="$SHELL ln"
		CHOWN="$SHELL chown"
		CHOWN="$SHELL chown"
		CHMOD="$SHELL chmod"
		MKDIR="$SHELL mkdir"
		RMDIR="$SHELL rmdir"
	else
		LN="$SHELL ln"
		CHOWN="$SHELL chown"
		CHOWN="$SHELL chown"
		CHMOD="$SHELL chmod"
		MKDIR="$SHELL mkdir"
		RMDIR="$SHELL rmdir"
	fi
fi
$SHELL sync

# General Definitions
CP="$SHELL cp"
LS="$SHELL ls"
RM="$SHELL rm"
TR="$SHELL tr"
WC="$SHELL wc"
CAT="$SHELL cat"
CUT="$SHELL cut"
SED="$SHELL sed"
TAR="$SHELL tar"
TEE="$SHELL tee"
DATE="$SHELL date"
ECHO="$SHELL echo"
EXPR="$SHELL expr"
FIND="$SHELL find"
GREP="$SHELL grep"
GZIP="$SHELL gzip"
SYNC="$SHELL sync"
TEST="$SHELL test"
EGREP="$SHELL egrep"
MOUNT="$SHELL mount"
TOUCH="$SHELL touch"
UNAME="$SHELL uname"
UMOUNT="$SHELL umount"
WHOAMI="$SHELL whoami"

#####################################################################

VERSION="MT v2.5"
SIGNATURE="Merruk Technology, SARL."

USERNAME=$($WHOAMI)
FILESIZE=$($CAT /data/local/Kernel-Ver | $WC -c)

# Nedded to Start Merruk Technology Kernels
if $TEST ! -d /data/local ; then
	$MKDIR /data/local
fi
$SYNC

######################################################################

exec > /data/local/Ker_userscript.log 2>&1

# Remove Kernel Debug file if it is big
if $TEST "$FILESIZE" -ge "10000"; then
	$RM -R /data/local/Kernel-Ver
fi
$SYNC

# Start Logging
$ECHO "  " >> /data/local/Kernel-Ver
$ECHO " Starting Merruk Logger $VERSION Script - ( AT ) - " $($DATE) >> /data/local/Kernel-Ver
$ECHO " - " >> /data/local/Kernel-Ver
$ECHO " - " >> /data/local/Kernel-Ver
$ECHO " " $($UNAME -a) >> /data/local/Kernel-Ver
$ECHO "  Username : " $USERNAME >> /data/local/Kernel-Ver
$ECHO " - " >> /data/local/Kernel-Ver
$ECHO " - " >> /data/local/Kernel-Ver

############# Start the important things #############

# mount /System Read/Write, we did it in top :)
$ECHO "	Re-Mount /System as R/W " >> /data/local/Kernel-Ver

$CHOWN $ROOT_SYSTEM /system/bin/sh

# Fix J4FS Filesystem with new driver :)
$ECHO "	Fix j4fs mount @ boot " >> /data/local/Kernel-Ver
J4FS=$($MOUNT | $GREP j4fs)
if $TEST J4FS!=NULL ; then
	$ECHO "		* LFS Partition already mounted " >> /data/local/Kernel-Ver
	$MOUNT -o rw,remount -t j4fs /dev/stl6 /mnt/.lfs
else
	$ECHO "		* Mount /mnt/.lfs Partition " >> /data/local/Kernel-Ver
	$MOUNT -o rw -t j4fs /dev/stl6 /mnt/.lfs
fi
$SYNC

# Fix /etc Folder link to /system/etc
if $TEST -d /etc ; then
	$ECHO "	Symlink /etc to /system/etc " >> /data/local/Kernel-Ver
	$RM -Rf /etc
	$LN -s /system/etc /etc
fi
$SYNC

# Fix System EXT4 Partitions 
if $TEST -f /etc/fstab ; then
	$ECHO "	Replace System 'fstab' File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/fstab
	$CP /sbin/fstab /etc/fstab
else
	$ECHO "	Replace System 'fstab' File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/fstab /etc/fstab
fi
$SYNC

# Fix Recovery EXT4 Partitions 
if $TEST -f /etc/recovery.fstab ; then
	$ECHO "	Replace Recovery 'fstab' File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/recovery.fstab
	$CP /sbin/recovery.fstab /etc/recovery.fstab
else
	$ECHO "	Replace Recovery 'fstab' File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/recovery.fstab /etc/recovery.fstab
fi
$SYNC

#$ECHO "	Mount /System as R/W " >> /data/local/Kernel-Ver
#$MOUNT -o remount,rw -t ext4 /dev/stl9 /system
#$MOUNT -o remount,rw -t ext4 / /
#$MOUNT -a

# Fix permissions in /sbin
$ECHO "	Fix Permissions on /sbin " >> /data/local/Kernel-Ver
$CHMOD 755 /sbin/*
$CHMOD 777 /sbin/bootanimation
$ECHO "		* Set a Special Permissions for Busybox & Su " >> /data/local/Kernel-Ver
$CHMOD 06755 /sbin/busybox
$CHOWN $ROOT_ROOT /sbin/su
$CHMOD 06755 /sbin/su

# UnlockBML & Remount Read/Write
$ECHO "	Unlock BML Blocks " >> /data/local/Kernel-Ver
/sbin/bmlunlock

# Create Needed Directories
###########################

# Fix Missed Directory for vendor link
if $TEST ! -d /system/vendor ; then
	$ECHO "	Create /system/vendor Folder " >> /data/local/Kernel-Ver
	$MKDIR /system/vendor
	$CHMOD 777 /system/vendor
fi
$SYNC

# Create sd-ext, otg_disk folders & smb/public for CIFS/SMB Mount Share Filesystem
if $TEST ! -d /sd-ext ; then
	$ECHO "	Create /sd-ext Folder " >> /data/local/Kernel-Ver
	$MKDIR /sd-ext
	$CHMOD 777 /sd-ext
fi
$SYNC

if $TEST ! -d /sdcard/otg_disk ; then
	$ECHO "	Create /sdcard/otg_disk Folder " >> /data/local/Kernel-Ver
	$MKDIR /sdcard/otg_disk
	$CHMOD 777 /sdcard/otg_disk
fi
$SYNC

if $TEST ! -d /sdcard/smb ; then
	$ECHO "	Create the /sdcard/smb Directory " >> /data/local/Kernel-Ver
	$MKDIR /sdcard/smb
	$CHMOD 777 /sdcard/smb
	$ECHO "	Create the /sdcard/smb/public Directory " >> /data/local/Kernel-Ver
	$MKDIR /sdcard/smb/public
	$CHMOD 777 /sdcard/smb/public
fi
$SYNC

##########################

# Create init.d Filder Scripts & Fix Permissions
$ECHO "	Create /system/etc/init.d Folder " >> /data/local/Kernel-Ver
if $TEST ! -d /system/etc/init.d ; then
	$MKDIR /system/etc/init.d
	$ECHO "		* Fix init.d Scripts Permissions -Folder/Permissions Done!- " >> /data/local/Kernel-Ver
	$CHMOD 777 /system/etc/init.d
	$CP /lib/scripts/* /system/etc/init.d/
	$CHMOD 777 /system/etc/init.d/*
else
	$ECHO "		* Fix init.d Scripts Permissions -Permissions Done!- " >> /data/local/Kernel-Ver
	$CHMOD 0777 /system/etc/init.d
	$CP /lib/scripts/* /system/etc/init.d/
	$CHMOD 0777 /system/etc/init.d/*
fi
$SYNC

# Fix System EXT4 Partitions 
if $TEST -f /etc/fstab ; then
	$ECHO "	Replace System 'fstab' File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/fstab
	$CP /sbin/fstab /etc/fstab
else
	$ECHO "	Replace System 'fstab' File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/fstab /etc/fstab
fi
$SYNC

# Fix Recovery EXT4 Partitions 
if $TEST -f /etc/recovery.fstab ; then
	$ECHO "	Replace Recovery 'fstab' File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/recovery.fstab
	$CP /sbin/recovery.fstab /etc/recovery.fstab
else
	$ECHO "	Replace Recovery 'fstab' File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/recovery.fstab /etc/recovery.fstab
fi
$SYNC

# Good Tools For enjoing the system
if $TEST -f /etc/sysctl.conf ; then
	$ECHO "	Add SysCtl Config File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/sysctl.conf
	$CP /sbin/sysctl.conf /etc/sysctl.conf
else
	$ECHO "	Add SysCtl Config File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/sysctl.conf /etc/sysctl.conf
fi
$SYNC

if $TEST -f /etc/mke2fs.conf ; then
	$ECHO "	Add Mke2fs Config File -Status 1- " >> /data/local/Kernel-Ver
	$RM /etc/mke2fs.conf
	$CP /sbin/mke2fs.conf /etc/mke2fs.conf
else
	$ECHO "	Add Mke2fs Config File -Status 2- " >> /data/local/Kernel-Ver
	$CP /sbin/mke2fs.conf /etc/mke2fs.conf
fi
$SYNC

#####################################################################
# Install New BusyBox Version                                       #
#####################################################################
$ECHO "	Install BusyBox -BOOT-" >> /data/local/Kernel-Ver
$SHELL --install -s /sbin/
$LN -s /sbin/recovery $SHELL

if $TEST -d /system/rooting ; then
	if $TEST -f /system/rooting/busybox ; then
		$ECHO "	Install BusyBox -SYSTEM- " >> /data/local/Kernel-Ver
		$CHMOD 0755 /system/rooting/busybox
		$CHOWN $ROOT_SYSTEM /system/rooting/busybox
		$CP /system/rooting/busybox /system/xbin/busybox
		/system/xbin/busybox --install -s /system/xbin/
		$CHMOD 0755 /system/xbin/*
		$CHOWN $ROOT_SYSTEM /system/xbin/*
		/system/xbin/sh
	else
		$ECHO "	Install BusyBox -KERNEL- " >> /data/local/Kernel-Ver
		$SHELL --install -s /system/xbin/
		$CHMOD 0755 /system/xbin/*
		$CHOWN $ROOT_SYSTEM /system/xbin/*
		/system/xbin/sh
	fi
else
	$MKDIR /system/rooting
fi
$SYNC

#####################################################################
# Test If BusyBox Are Really Installed                              #
#####################################################################
$ECHO "		Test/Repear BusyBox Install" >> /data/local/Kernel-Ver
if $TEST ! -f /system/bin/busybox ; then
	$ECHO "		* Link BusyBox to /system/bin -Status 1- " >> /data/local/Kernel-Ver
	$LN -s /system/xbin/busybox /system/bin/busybox
	$CHMOD 0755 /system/bin/busybox
	$CHOWN $ROOT_SYSTEM /system/bin/busybox
else
	$ECHO "		* Link BusyBox to /system/bin -Status 2- " >> /data/local/Kernel-Ver
	$RM /system/bin/busybox
	$LN -s /system/xbin/busybox /system/bin/busybox
	$CHMOD 0755 /system/bin/busybox
	$CHOWN $ROOT_SYSTEM /system/bin/busybox
fi
$SYNC

if $TEST ! -f /system/xbin/busybox ; then
	$ECHO "		* Link BusyBox to /system/xbin -Done!- " >> /data/local/Kernel-Ver
	$CP $SHELL /system/xbin/busybox
	/system/xbin/busybox --install -s /system/xbin/
	$CHMOD 0755 /system/xbin/busybox
	$CHOWN $ROOT_SYSTEM /system/xbin/busybox
fi
$SYNC

#####################################################################
# system now works with busybox commands                            #
# without full path to busybox file.                                #
# Ex : command [option] insted of $SHELL command [option]           #
#####################################################################

# Fix shell in some CM7 Versions
if $TEST ! -f /system/bin/sh ; then
	$ECHO " Rename /system/bin/sh0 " >> /data/local/Kernel-Ver 
	$CP /system/bin/sh0 /system/bin/sh
	$LN -s $SHELL /system/bin/sh
	/system/bin/sh
fi
$SYNC
if $TEST ! -d /cache/dalvik-cache ; then
	$ECHO " Fix /data/dalvik-cache " >> /data/local/Kernel-Ver 
	$LN -s /data/dalvik-cache /cache/dalvik-cache
fi
$SYNC

# Small logcat fixes :)
if $TEST ! -f /system/csc/feature.xml ; then
	$ECHO "	Small Fix in logcat -CSC-" >> /data/local/Kernel-Ver
	$TOUCH /system/csc/feature.xml
	$ECHO "" >> /system/csc/feature.xml
fi
$SYNC
if $TEST ! -f /system/lib/egl/libGLES_hgl_server.so ; then
	$ECHO "	Small Fix in logcat -GLES-" >> /data/local/Kernel-Ver
	$CP /system/lib/egl/libGLES_hgl.so /system/lib/egl/libGLES_hgl_server.so
fi
$SYNC

# Fix Screwy Ownerships Problems to root.system
$ECHO "	Fix Screwy Ownerships Problems : " >> /data/local/Kernel-Ver
for merruktechnology in default.prop init init.goldfish.rc init.rc init.charge.rc init.bcm21553.rc ueventd.rc recovery.rc fota.rc lib res sbin
do
	if $TEST -d /$merruktechnology ; then
		$ECHO "		* Fix Dir- /" $merruktechnology >> /data/local/Kernel-Ver
		$CHOWN $ROOT_SYSTEM /$merruktechnology/*
	else
		$ECHO "		* Fix File- " $merruktechnology >> /data/local/Kernel-Ver
		$CHOWN $ROOT_SYSTEM /$merruktechnology
	fi
	$SYNC
done

$CHOWN $ROOT_SYSTEM /lib/modules/*
$CHOWN $ROOT_SYSTEM /system/lib/modules/*
$CHOWN $ROOT_SYSTEM /res/*
$CHOWN $ROOT_SYSTEM /res/images/*
$CHMOD 644 /system/build.prop
$CHOWN $ROOT_ROOT /system/build.prop
$CHMOD 0755 /etc/dbus.conf

# Provide support for a shell script to protect root access
if $TEST ! -f /system/app/Superuser.apk ; then
	if $TEST -f /system/rooting/Superuser.apk ; then
		$ECHO "	Install New Superuser.apk Version -Rooted!- " >> /data/local/Kernel-Ver
		$CP /system/rooting/Superuser.apk /system/app/Superuser.apk
		$CHMOD 0755 /system/app/Superuser.apk
		$RM /sbin/Superuser.apk
	else
		$ECHO "	Install New Superuser.apk Version -Pre-Rooted!- " >> /data/local/Kernel-Ver
		$CP /sbin/Superuser.apk /system/app/Superuser.apk
		$CHMOD 0755 /system/app/Superuser.apk
		$RM /sbin/Superuser.apk
	fi
else
	$ECHO "	Install New Superuser.apk Version -Already Installed- " >> /data/local/Kernel-Ver
	$RM /sbin/Superuser.apk
fi
$SYNC

# Setup tmpfs for Su & Install/Fix Permissions for New Su
$ECHO "	Install 32k tmpfs for Su " >> /data/local/Kernel-Ver
if $TEST ! -d /merruk ; then
	$ECHO "		* Create & Mount /Merruk tmpfs Directory " >> /data/local/Kernel-Ver
	$MKDIR /merruk
	$MOUNT -o size=512k -t tmpfs tmpfs /merruk
else
	$ECHO "		* Mount /Merruk tmpfs Directory " >> /data/local/Kernel-Ver
	$MOUNT -o size=512k -t tmpfs tmpfs /merruk
fi
$SYNC

$ECHO "	Setup New Su Binary Version " >> /data/local/Kernel-Ver
if $TEST -f /system/rooting/su ; then
	$CHMOD 777 /system/rooting/su
	$CAT /system/rooting/su > /merruk/su
	$CHMOD 06755 /merruk/su
	$ECHO "		* Installed /system/rooting/su -Done!- " >> /data/local/Kernel-Ver
else
	if $TEST -f /system/xbin/su ; then
		$CHMOD 777 /system/xbin/su
		$CAT /system/xbin/su > /merruk/su
		$CHMOD 06755 /merruk/su
		$ECHO "		* Installed /system/xbin/su -Done!- " >> /data/local/Kernel-Ver
	else
		$CHMOD 777 /sbin/su
		$CAT /sbin/su > /merruk/su
		$CHMOD 06755 /merruk/su
		$ECHO "		* Installed /sbin/su -Done!- " >> /data/local/Kernel-Ver
	fi
fi
$SYNC

# Establish root in common system directories for 3rd party applications & fix Permissions
$ECHO "	Establish Root in Common System Directories " >> /data/local/Kernel-Ver
if $TEST -f /system/bin/su ; then
	$RM /system/bin/su
	$LN -s /merruk/su /system/bin/su
	$CHMOD 06755 /system/bin/su
	$ECHO "		* Fixed /system/bin/su -Status 1- " >> /data/local/Kernel-Ver
else
	$LN -s /merruk/su /system/bin/su
	$CHMOD 06755 /system/bin/su
	$ECHO "		* Fixed /system/bin/su -Status 2- " >> /data/local/Kernel-Ver
fi
$SYNC

if $TEST -f /system/xbin/su ; then
	$RM /system/xbin/su
	$LN -s /merruk/su /system/xbin/su
	$CHMOD 06755 /system/xbin/su
	$ECHO "		* Fixed /system/xbin/su -Status 1- " >> /data/local/Kernel-Ver
else
	$LN -s /merruk/su /system/xbin/su
	$CHMOD 06755 /system/xbin/su
	$ECHO "		* Fixed /system/xbin/su -Status 2- " >> /data/local/Kernel-Ver
fi
$SYNC

if $TEST -f /system/bin/jk-su ; then
	$RM /system/bin/jk-su
	$LN -s /merruk/su /system/bin/jk-su
	$CHMOD 06755 /system/bin/jk-su
	$ECHO "		* Fixed /system/bin/jk-su -Status 1- " >> /data/local/Kernel-Ver
else
	$LN -s /merruk/su /system/bin/jk-su
	$CHMOD 06755 /system/bin/jk-su
	$ECHO "		* Fixed /system/bin/jk-su -Status 2- " >> /data/local/Kernel-Ver
fi
$SYNC

# Remove Su from the problematic locations
$ECHO "	Remove Su From Problematic Locations " >> /data/local/Kernel-Ver
if $TEST -f /sbin/su ; then
	$RM /sbin/su
	$ECHO "		* Fixed /sbin/su -Done!- " >> /data/local/Kernel-Ver
elif $TEST -f /bin/su ; then
	$RM /bin/su
	$ECHO "		* Fixed /bin/su -Done!- " >> /data/local/Kernel-Ver
else
	$ECHO "		* Nothing to be fixed :) " >> /data/local/Kernel-Ver
fi
$SYNC

# Fix BusyBox DNS while system is read-write
if $TEST ! -f /system/etc/resolv.conf ; then
	$ECHO "	Fix BusyBox DNS While System is Read/Write " >> /data/local/Kernel-Ver
	$ECHO "nameserver 8.8.8.8" >> /system/etc/resolv.conf
	$ECHO "nameserver 8.8.8.4" >> /system/etc/resolv.conf
fi
$SYNC

# Patch to Prevent Certain Malware Apps
if $TEST -f /system/bin/profile ; then
	$ECHO "	Install a Patch to Prevent Certin Malware Apps " >> /data/local/Kernel-Ver
	$RM /system/bin/profile
	$TOUCH /system/bin/profile
	$CHMOD 644 /system/bin/profile
fi
$SYNC

# Setup proper passwd and group files for 3rd party root access
$ECHO "	Setup Proper passwd & group files for 3rd party root access " >> /data/local/Kernel-Ver
if $TEST ! -f /system/etc/passwd ; then
	$ECHO "		* passwd Done! " >> /data/local/Kernel-Ver
	$ECHO "root::0:0:root:/data/local:/system/bin/sh" > /system/etc/passwd
	$CHMOD 0666 /system/etc/passwd
fi
$SYNC

if $TEST ! -f /system/etc/group ; then
	$ECHO "		* group Done! " >> /data/local/Kernel-Ver
	$ECHO "root::0:" > /system/etc/group
	$CHMOD 0666 /system/etc/group
fi
$SYNC

# Force Mount SD-Card
$UMOUNT /sdcard
$ECHO "	Force Mount the SD-Card " >> /data/local/Kernel-Ver
$MOUNT -t vfat -o rw,nosuid,nodev,noexec,uid=1000,gid=1015,fmask=0002,dmask=0002,allow_utime=0020,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro /dev/block/mmcblk0p1 /sdcard
$SHELL sleep 2
$MOUNT -t vfat -o remount,rw,nosuid,nodev,noexec,uid=1000,gid=1015,fmask=0002,dmask=0002,allow_utime=0020,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro /dev/block/mmcblk0p1 /sdcard
$SHELL sleep 2

# Install Kernel Modules
if $TEST -d /sdcard/system/lib/modules && $TEST -f /sdcard/system/lib/modules/* ; then
	$ECHO "	Install Kernel Modules " >> /data/local/Kernel-Ver
	$CP /sdcard/system/lib/modules/* /system/lib/modules/
	$SHELL sleep 4
	$ECHO "	Remove Kernel Modules From SD-Card " >> /data/local/Kernel-Ver
	$RM -Rf /sdcard/system
	$SHELL sleep 2
else
	$ECHO "	Create /sdcard/system/lib/modules/ Folder " >> /data/local/Kernel-Ver
	$MKDIR /sdcard/system
	$MKDIR /sdcard/system/lib
	$MKDIR /sdcard/system/lib/modules
	$TOUCH /sdcard/system/lib/modules/ReadMe
	$ECHO "Put Your Modules Here, Merruk's Kernel will install them automatically." > /sdcard/system/lib/modules/ReadMe
fi
$SYNC

# Install init.d Scripts from the SD-Card
if $TEST -d /sdcard/scripts && $TEST -f /sdcard/scripts/* ; then
	$ECHO "	Install init.d Scripts from SD-Card " >> /data/local/Kernel-Ver
	$CP /sdcard/scripts/* /system/etc/init.d/
	$SHELL sleep 1
	$CHMOD 777 /system/etc/init.d/*
else
	$ECHO "	Create /sdcard/scripts Folder " >> /data/local/Kernel-Ver
	$MKDIR /sdcard/scripts
	$TOUCH /sdcard/scripts/ReadMe
	$ECHO "Put Your Init.d Scripts Here, Files names need's to be start with numbers ex: from 06 to 98 like this example test script '99test' " > /sdcard/system/lib/modules/ReadMe
fi
$SYNC

# Unmount /sdcard so the app's are here again :)
$ECHO "	Un-Mount /SdCard to fix the Apps Problem... " >> /data/local/Kernel-Ver
$UMOUNT /sdcard

# Replace The Original WIFI Driver
if $TEST -f /system/lib/modules/bcm4330.ko ; then
	$ECHO "	Replace The Original WIFI Driver " >> /data/local/Kernel-Ver
	$SHELL mv /system/lib/modules/dhd.ko /system/lib/modules/dhd_old.ko
	$SHELL mv /system/lib/modules/bcm4330.ko /system/lib/modules/dhd.ko
fi
$SYNC

# Replace The Original Headset Driver
if $TEST -f /system/lib/modules/brcm-headsetsw.ko ; then
	$ECHO "	Replace The Original Headset Driver " >> /data/local/Kernel-Ver
	$SHELL mv /system/lib/modules/bcm_headsetsw.ko /system/lib/modules/bcm_headsetsw_old.ko
	$SHELL mv /system/lib/modules/brcm-headsetsw.ko /system/lib/modules/bcm_headsetsw.ko
fi
$SYNC

# Add Custom MP3 BootSound
if $TEST ! -f /system/bin/bootsound && $TEST ! -f /system/etc/init.local.rc ; then
	$ECHO "	Add Custom MP3 BootSound Support : Put your android_audio.mp3 file in /data/local/" >> /data/local/Kernel-Ver
	$CP /sbin/bootsound /system/bin/bootsound
	$CHMOD 777 /system/bin/bootsound
	$CHOWN root.shell /system/bin/bootsound
	$CP /init.local.rc /system/etc/init.local.rc
	$CHMOD 777 /system/etc/init.local.rc
	$ECHO "### Sound Start ###" >> /system/build.prop
	$ECHO "ro.config.play.bootsound=1" >> /system/build.prop
	$ECHO "ro.config.boot.playfile=android_audio.mp3" >> /system/build.prop
	$ECHO "###  Sound End  ###" >> /system/build.prop
fi
$SYNC

# Load Modules
$ECHO "	Load The Needed Modules... " >> /data/local/Kernel-Ver
insmod /system/lib/modules/ge_drv.ko
sleep 1
#insmod /system/lib/modules/usbcore.ko
#sleep 1
#insmod /system/lib/modules/usbhid.ko
#sleep 1
#insmod /system/lib/modules/scsi_mod.ko
#sleep 1
#insmod /system/lib/modules/scsi_wait_scan.ko
#sleep 1
#insmod /system/lib/modules/libata.ko
#sleep 1
#insmod /system/lib/modules/tun.ko
#sleep 1
#insmod /system/lib/modules/ipip.ko
#sleep 1
#insmod /system/lib/modules/tpm.ko
#sleep 1
#insmod /system/lib/modules/raw.ko
#sleep 1
#insmod /system/lib/modules/ssb.ko
#sleep 1
#insmod /system/lib/modules/nls_utf8.ko
#sleep 1
#insmod /system/lib/modules/cifs.ko
#sleep 1
#insmod /system/lib/modules/ns558.ko
#sleep 1

# Enable init.d support
if $TEST -d /system/etc/init.d ; then
	$ECHO "	Run Init.d Scripts " >> /data/local/Kernel-Ver
	/system/bin/logwrapper $SHELL run-parts /system/etc/init.d
	$SHELL sleep 2
fi
$SYNC

# Symlink reboot to the correct file
#cd /system/bin
#$LN -s /system/bin/toolbox reboot
#$CHMOD 0775 reboot
#$CHOWN $ROOT_SYSTEM reboot
#cd /sbin
#$LN -s /sbin/toolbox reboot
#$CHMOD 0775 reboot
#$CHOWN $ROOT_SYSTEM reboot
#cd /

# Debbug things
if $TEST -f /DEBUG_KERNEL ; then
	$ECHO "	Activate Kernel Advanced Debug Options " >> /data/local/Kernel-Ver
	if $TEST -f /data/local/mount.log ; then
		$RM /data/local/mount.log
		$MOUNT > /data/local/mount.log
	else
		$MOUNT > /data/local/mount.log
	fi

	if $TEST -f /data/local/mount.log ; then
		$RM /data/local/system_files.log
		$LS -arls /system/bin/ > /data/local/system_files.log
	else
		$LS -arls /system/bin/ > /data/local/system_files.log
	fi

	if $TEST -f /data/local/mount.log ; then
		$RM /data/local/logcat.log
		/system/bin/logcat > /data/local/logcat.log
	else
		/system/bin/logcat > /data/local/logcat.log
	fi

	if $TEST -f /data/local/mount.log ; then
		$RM /data/local/kmsg.log
		$SHELL dmesg > /data/local/kmsg.log
	else
		$SHELL dmesg > /data/local/kmsg.log
	fi

	$ECHO "	Compress Log Files To /Merruk_Log.tar.gz " >> /data/local/Kernel-Ver

	if $TEST -f /data/local/bootanimation.zip ; then
		cd /data/local
		$SHELL mv /data/local/bootanimation.zip /
		$TAR cvzf /Merruk_Log.tar.gz *
		$SHELL mv /bootanimation.zip ./
		cd /
	else
		cd /data/local
		$TAR cvzf /Merruk_Log.tar.gz *
		cd /
	fi

	if $TEST -f /data/local/android_audio.mp3 ; then
		cd /data/local
		$SHELL mv /data/local/android_audio.mp3 /
		$TAR cvzf /Merruk_Log.tar.gz *
		$SHELL mv /android_audio.mp3 ./
		cd /
	else
		cd /data/local
		$TAR cvzf /Merruk_Log.tar.gz *
		cd /
	fi

fi
$SYNC

#Link /dev/random and /dev/urandom to /dev/erandom and /dev/frandom - this speeds up random number generation
$ECHO " Link random and urandom to erandom and frandom " >> /data/local/Kernel-Ver
$CHMOD 666 /dev/erandom
$LN -f /dev/erandom /dev/random
$CHMOD 666 /dev/frandom
$LN -f /dev/frandom /dev/urandom
$SYNC

# Remount /System read only and continue
$ECHO "	Re-Mount /System as R/O & Continue Booting... " >> /data/local/Kernel-Ver
$MOUNT -o remount,rw -t ext4 /dev/stl9 /system
$MOUNT -o remount,rw -t ext4 / /
$SYNC

# Stop Logging
$ECHO " - " >> /data/local/Kernel-Ver
$ECHO " - " >> /data/local/Kernel-Ver
$ECHO " End of Merruk Logger Script - ( AT ) - " $($DATE) >> /data/local/Kernel-Ver
$ECHO " " >> /data/local/Kernel-Ver
$ECHO " --------------------------------------------------------------------" >> /data/local/Kernel-Ver
$ECHO "		MerrukTechnology Kernel By Maroc-OS @ XDA-Devolopers		" >> /data/local/Kernel-Ver
$ECHO " --------------------------------------------------------------------" >> /data/local/Kernel-Ver

exit 0
